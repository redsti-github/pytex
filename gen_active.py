import string
from specialcharnames import *

# TODO: make newline depend on \the\endlinechar

of = open("build/active_chars.tex", "w")

of.write("% DO NOT EDIT THIS FILE DIRECTLY\n")
of.write("% This file was generated by 'gen_active.py'\n\n")

of.write("\\edef\\@pytexTMP@prevTildaCatcode{\\the\\catcode"+str(ord("~"))+"}\n")
of.write("\\edef\\@pytexTMP@prevCaretCatcode{\\the\\catcode"+str(ord("^"))+"}\n")
of.write("\\edef\\@pytexTMP@prevMinusCatcode{\\the\\catcode"+str(ord("-"))+"}\n")
of.write("\\edef\\@pytexTMP@prevStarCatcode{\\the\\catcode"+str(ord("*"))+"}\n")

of.write("\\catcode`~=13\n")
of.write("\\catcode`^=13\n")
of.write("\\catcode`*=13\n")
of.write("\\catcode`-=13\n")
of.write("\\let~\\def\n") # TODO: reset definitions of ~, *, ^, -
of.write("\\let-\\expandafter\n")
of.write("\\let^\\catcode\n\n")

##################### setup \@pytexActive@<char> macros #####################

# letters
for char in string.ascii_lowercase + string.ascii_uppercase:
    of.write("\\def*{\\@pytexActive@"+char+"}\n") # set * to \@pytexActive@<char>
    of.write("^" + str(ord(char)) + "=13\n")      # set catcode of <char> to 13
    of.write("-~*{"+char+"}\n")                   # def \@pytexActive@<char> to <char>
    of.write("^" + str(ord(char)) + "=11\n\n")    # reset catcode back to 11 TODO: reset to what it was before


# numbers + special chars
for char in specialcharnames:
    if char == "\\" or char == "@" or char == "\n" or char == "\r" or char == "{" or char == "}": # special cases that must be handled differently
        continue
    of.write("\\edef\\@pytexTMP@prevcatcode{\\the\\catcode" + str(ord(char)) +"}\n") # save catcode of <char> to \@pytexTMP@prevcatcode
    of.write("\\def\\@pytexTMP@resetcatcode{\\catcode" + str(ord(char)) + "=\\@pytexTMP@prevcatcode}\n")
    of.write("\\catcode" + str(ord(char)) + "=13\n")                         # set catcode of <char> to 13
    of.write("\\def\\@pytexActive@"+specialcharnames[char] + "{"+char+"}\n") # def \@pytexActive@<charName> to <char>
    of.write("\\@pytexTMP@resetcatcode\n\n") # reset catcode of <char>

# characters '{' and '}'
of.write("\\catcode`~=1\n")
of.write("\\catcode`-=2\n")
for char in ['{', '}']:
    of.write("\\edef\\@pytexTMP@prevcatcode{\\the\\catcode" + str(ord(char)) +"}\n")
    of.write("\\def\\@pytexTMP@resetcatcode{\\catcode" + str(ord(char)) + "=\\@pytexTMP@prevcatcode}\n")
    of.write("\\catcode" + str(ord(char)) + "=13\n")
    of.write("\\def\\@pytexActive@"+specialcharnames[char]+"~"+char+"-\n")
    of.write("\\@pytexTMP@resetcatcode\n\n")


# backslash
char = '\\'
of.write("\\catcode`~=13\n")
of.write("\\let~\\let\n")
of.write("\\edef\\@pytexTMP@prevcatcode{\\the\\catcode" + str(ord(char)) +"}\n")
of.write("\\def\\@pytexTMP@resetcatcode{\\catcode" + str(ord(char)) + "=\\@pytexTMP@prevcatcode}\n")
of.write("\\catcode`~=0\n")
of.write("\\catcode" + str(ord(char)) + "=13\n")
of.write("~def~@pytexActive@"+specialcharnames[char]+"{"+char+"}\n")
of.write("~@pytexTMP@resetcatcode\n\n")
of.write("\\catcode"+str(ord('~'))+"=13\n")

# newline char
char = '\r' # TODO or '\n' ?, maybe use \endlinechar ?
of.write("\\edef\\@pytexTMP@prevcatcode{\\the\\catcode" + str(ord(char)) +"}\n")
of.write("\\def\\@pytexTMP@resetcatcode{\\catcode" + str(ord(char)) + "=\\@pytexTMP@prevcatcode}%\n")
of.write("\\catcode" + str(ord(char)) + "=13%\n")
of.write("\\def\\@pytexActive@"+specialcharnames[char]+"{\n}%\n")
of.write("\\catcode" + str(ord(char)) + "=5%\n\n")

# reset catcodes
of.write("\\catcode`~=\\@pytexTMP@prevTildaCatcode\n")
of.write("\\catcode`^=\\@pytexTMP@prevCaretCatcode\n")
of.write("\\catcode`-=\\@pytexTMP@prevMinusCatcode\n")
of.write("\\catcode`*=\\@pytexTMP@prevStarCatcode\n\n")

# be nice and undefine temporary macros
of.write("\\let\\@pytexTMP@macro\\undefined\n")
of.write("\\let\\@pytexTMP@prevcatcode\\undefined\n")
of.write("\\let\\@pytexTMP@prevTildaCatcode\\undefined\n")
of.write("\\let\\@pytexTMP@prevCaretCatcode\\undefined\n")
of.write("\\let\\@pytexTMP@prevMinusCatcode\\undefined\n")
of.write("\\let\\@pytexTMP@prevStarCatcode\\undefined\n")
of.write("\\let\\@pytexTMP@resetcatcode\\undefined\n\n\n")




# set all active character definitions to \@pytexChar@<char>
of.write("\\def\\@pytexDefAll{\n")
for char in string.ascii_lowercase + string.ascii_uppercase + ''.join(specialcharnames.keys()):
    if char == "@": # TODO
        continue
    if char in specialcharnames:
        char = specialcharnames[char]
    of.write("\t\\expandafter\\let\\expandafter\\@pytexPrevmacro@"+char+"\\@pytexActive@"+char+"\n")
    of.write("\t\\expandafter\\def\\@pytexActive@"+char+"{\\@pytexChar@"+char+"}\n")
of.write("}\n")

# set all active character definitions to \relax
of.write("\\def\\@pytexRelaxAll{\n")
for char in string.ascii_lowercase + string.ascii_uppercase + ''.join(specialcharnames.keys()):
    if char == "@": # TODO
        continue
    if char in specialcharnames:
        char = specialcharnames[char]
    of.write("\t\\expandafter\\let\\@pytexActive@"+char+"\\relax\n")
of.write("}\n")

# resets all active character definitions
of.write("\\def\\@pytexResetAll{\n")
for char in string.ascii_lowercase + string.ascii_uppercase + ''.join(specialcharnames.keys()):
    if char == "@": # TODO
        continue
    if char in specialcharnames:
        char = specialcharnames[char]
    of.write("\t\\expandafter\\let\\@pytexActive@"+char+"\\@pytexPrevmacro@"+char+"\n")
    of.write("\t\\let\\@pytexPrevmacro@"+char+"\\undefined\n")
of.write("}\n")


def alpha_number(x):
    return ''.join([chr(ord(c)+17) for c in str(x)])

# macro to set all characters as active
of.write("\\def\\@pytexMakeAllActive{\n")
for i in range(256):
    of.write("\t\\edef\\@pytexPrevCatcode@"+alpha_number(i)+"{\\the\\catcode"+str(i)+"}\n")
for char in string.printable:
    of.write("\t\\catcode"+str(ord(char))+"=13\n")
of.write("}\n")

# reset all character catcodes
of.write("\\def\\@pytexResetCatcodes{\n")
for i in range(256):
    of.write("\t\\catcode"+str(i)+"=\\@pytexPrevCatcode@"+alpha_number(i)+"\n")
    of.write("\t\\let\\@pytexPrevCatcode@"+alpha_number(i)+"\\undefined\n")
of.write("}\n")

